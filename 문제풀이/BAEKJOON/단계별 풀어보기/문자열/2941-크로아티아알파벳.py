# 백준 알고리즘 - 문자열 - 2941.크로아티아 알파벳
# https://www.acmicpc.net/problem/2941
# 크로아티아 알파벳은 ['c=','c-','dz=','d-','lj','nj','s=','z='] 의 문자를 포함한다.
# 입력으로 주어진 단어가 몇 개의 크로아티아 알파벳으로 이뤄져있는지 출력해야 한다.
# 목록에 없는 알파벳은 한 글자씩 센다.

# * 복기할 점
# 문제 해석 자체를 잘못했었음. 해당 문자가 있으면 그문자를 1개로 본다 -> 찾으면 그냥 1개짜리 문자로 바꿈
# 그러고 문자열의 개수 출력하면 끝.
N = input()
stack = ['c=','c-','dz=','d-','lj','nj','s=','z=']

for i in stack:
    N = N.replace(i,'#')

print(len(N))


# 다른 풀이 ----
# 복기할 점
# 인간은 같은 실수를 반복한다는걸 깨닳았다.
# 다시 풀었을때 복기사항도 유사하다. 문자열을 1개로 보는 부분은 이번엔 인식해서 다른의미론 어느정도 발전했지만
# 반복문 돌리면서 하나하나 변환시키고 별도의 변수 설정해서 
# 그 변수로 문자열 갯수를 지워가며 카운트시켜서 문제를 풀려 했으나 replace 메소드 반복횟수를 1로 설정하고 하니
# 특정 반례에서 통과를 못해서 다시 replace 메소드의 반복횟수를 없애니까 통과했음.
# -> 문자열을 변환시키는데 있어서 1번씩만 순회하듯이 반복 변환 하면 특정 반례에서 변환 과정이 달라 통과를 못함.
# 결국 길이만 왕창 길어져서 다듬고보니 결국 기존 풀이와 같게 되버렸다.
# 시간이 너무걸렸다. 반성하자.

import sys
text = str(sys.stdin.readline().strip())
c_alpha = ["c=","c-","dz=","d-","lj",'nj','s=','z=']

for i in c_alpha:
    if i in text:
        text = text.replace(i,"#")

print(len(text))